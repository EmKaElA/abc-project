@ <stdio.hdr>
@ "lexer.hdr"
@ "gen.hdr"
@ "parser.hdr"

fn parseTerm(): ->Expr;
fn parseFactor(): ->Expr;

fn parseExpr(): ->Expr
{
    local left: ->Expr = parseTerm();
    if (!left) {
        return nullptr;
    }
    while (token.kind == PLUS || token.kind == MINUS) {
      local kind: TokenKind  = token.kind;
      getToken();
      local right: ->Expr = parseFactor();
      if (!right) {
          printf("%u.%u expected term\n",
                 token.pos.row, token.pos.col);
          assert(0);
      }
      switch(kind){
        case PLUS: left = createBinaryExpr(EXPR_ADD, left, right); break;
        case MINUS: left = createBinaryExpr(EXPR_SUB, left, right); break;
        default: assert(0);
      }

    }
    return left;
}

fn parseTerm(): ->Expr
{
    local left: ->Expr = parseFactor();
    if (!left) {
        return nullptr;
    }
    while (token.kind == ASTERISK) {
        local kind: TokenKind  = token.kind;
        getToken();
        local right: ->Expr = parseFactor();
        if (!right) {
            printf("%u.%u expected term\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        switch(kind){
          case ASTERISK: left = createBinaryExpr(EXPR_MUL, left, right); break;
          case SLASH: left = createBinaryExpr(EXPR_DIV, left, right); break;
          default: assert(0);
        }
    }
    return left;
}

fn parseFactor(): ->Expr
{
    if (token.kind == DECIMAL_LITERAL) {
        local expr: ->Expr = createIntegerExpr(token.val);
        getToken();
        return expr;
    } else if (token.kind == LPAREN) {
        getToken();
        local reg: ->Expr = parseExpr();

        if (!reg) {
            printf("%u.%u expected expression\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        if (token.kind != RPAREN) {
            printf("%u.%u expected ')'\n",
                   token.pos.row, token.pos.col);
            assert(0);
        }
        getToken();
        return reg;
    } else {
        return nullptr;
    }
}
