@<stdio.hdr>
@"lexer.hdr"

global ch: int;
global currentPos: Pos = {1, 0};
global updateVal: bool;
global lengthVal: size_t;

global token: Token;

fn isDigit(ch:  int): bool{
  return ch >= '0' && ch <= '9';
}

fn isLetter(ch:  int): bool{
  return (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z');
}

fn nextCh()
{
  if (updateVal){
    assert(lengthVal < sizeof(token.val) / sizeof(token.val[0]));
    token.val[lengthVal++] = ch;
    token.val[lengthVal] = 0;
  }
  ch = getchar();
  if (ch == '\n') {
    ++currentPos.row;
    currentPos.col = 0;
  }else{
    ++currentPos.col;
  }
}

fn getToken(): TokenKind
{
  updateVal = false;
  lengthVal = 0;

  while (ch == 0 || ch == ' ' || ch == '\n' || ch == '\t'){
    nextCh();
  }
  token.pos = currentPos;
  updateVal = true;

  if (isDigit(ch)){
    while (isDigit(ch)){
      nextCh();
    }
    return token.kind = DECIMAL_LITERAL;

  } else if (ch == '+'){
    nextCh();
    return token.kind = PLUS;

  } else if (ch == EOF){
    return token.kind = EOI;

  } else if (ch == '*'){
    nextCh();
    return token.kind = ASTERISK;

  } else if (ch == '('){
    nextCh();
    return token.kind = LPAREN;

  } else if (ch == ')'){
    nextCh();
    return token.kind = RPAREN;

  } else if (isLetter(ch)){
    nextCh();
    if(isLetter(ch) || isDigit(ch)){
      nextCh();
      return token.kind = IDENTIFIER;
    }else{
      return token.kind = BAD_TOKEN;
    }
  }else {
    nextCh();
    return token.kind = BAD_TOKEN;

  }
}

fn tokenKindStr(token: TokenKind): -> char
{
  switch(token){
    case BAD_TOKEN: return "BAD_TOKEN";
    case EOI: return "EOI";
    case DECIMAL_LITERAL: return "DECIMAL_LITERAL";
    case PLUS: return "PLUS";
    case ASTERISK: return "ASTERISK";
    case LPAREN: return "LPAREN";
    case RPAREN: return "RPAREN";
    case IDENTIFIER: return "IDENTIFIER";
    default: return "??";
  }
}
